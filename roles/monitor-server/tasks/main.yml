---
# file: roles/monitor-server/tasks/main.yml
#
# docker-image: pull image from the list
- name: monitor-server | pull docker images
  docker_image:
    name: "{{ item.value.image }}"
    state: present
  with_dict: "{{ monitor_images }}"

# create monitor-net
- name: monitor-server | create monitor-net
  docker_network:
    name: monitor-net

#
# prometheus
#
# copy: copy files for prometheus
- name: monitor-server | copy files for prometheus
  copy:
    src: prometheus/
    dest: /monitor-server/prometheus/etc/
    owner: root
    group: root
    mode: 0644

# template: copy containers.rules for prometheus
- name: monitor-server | copy containers.rules for prometheus
  template: 
    src: containers.rules.j2
    dest: /monitor-server/prometheus/etc/containers.rules

# template: copy prometheus.yml for prometheus
- name: monitor-server | copy prometheus.yml for prometheus
  template: 
    src: prometheus.yml.j2
    dest: /monitor-server/prometheus/etc/prometheus.yml

# docker-container: run prometheus
- name: monitor-server | run prometheus
  docker_container:
    name: prometheus
    hostname: prometheus
    image: "{{ monitor_images.prometheus.image }}"
    volumes:
      - /monitor-server/prometheus/etc/:/etc/prometheus/
      - /monitor-server/prometheus/data/:/prometheus/
    command: -config.file=/etc/prometheus/prometheus.yml -storage.local.path=/prometheus -alertmanager.url=http://{{ alertmanager_host_ip }}:{{ alertmanager_expose_port }} -storage.local.memory-chunks=100000
    restart_policy: unless-stopped
    ports:
      - "{{ prometheus_expose_port }}:9090"
    networks:
      - name: monitor-net
    labels:
      org.label-schema.group: "monitoring"
    state: started
#
# alertmanager
#
# copy: copy files for alertmanager
- name: monitor-server | copy files for alertmanager
  copy:
    src: alertmanager/
    dest: /monitor-server/alertmanager/etc/
    owner: root
    group: root
    mode: 0644

# docker-container: run alertmanager
- name: monitor-server | run alertmanager
  docker_container:
    name: alertmanager
    hostname: alertmanager
    image: "{{ monitor_images.alertmanager.image }}"
    volumes:
      - /monitor-server/alertmanager/etc/:/etc/alertmanager/
    command: -config.file=/etc/alertmanager/config.yml -storage.path=/alertmanager
    restart_policy: unless-stopped
    ports:
      - "{{ alertmanager_expose_port }}:9093"
    networks:
      - name: monitor-net
    labels:
      org.label-schema.group: "monitoring"
    state: started
#
# grafana
#
# docker-container: run grafana
- name: monitor-server | run grafana
  docker_container:
    name: grafana
    hostname: grafana
    image: "{{ monitor_images.grafana.image }}"
    volumes:
      - /monitor-server/grafana/data:/var/lib/grafana
    env:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: P@ssw0rd
      GF_USERS_ALLOW_SIGN_UP: false
    restart_policy: unless-stopped
    ports:
      - "{{ grafana_expose_port }}:3000"
    networks:
      - name: monitor-net
    labels:
      org.label-schema.group: "monitoring"
    state: started
